!function(){"use strict";class t{static parse_input(t,e,i,s){let a=this.sanitize_input(t);if(this.validate_input(a)){let t=this.deserialize_input(a),n="",h=document.querySelector(".dataset-container .invalid-feedback"),r=document.querySelector("textarea#dataset-textarea");if(null==t)n="Malformed input data";else if("graph"==e){0==Array.isArray(t)&&(n="Input data is not a 2D array");for(let e of t)if(0==Array.isArray(e)){n="Input data is not a 2D array";break}if("adjacency_matrix"==i){let e=t.length;for(let i of t)if(i.length!=e){n="Matrix is not square";break}return t}if("adjacency_list"==i){let e=s.graph.weighted?3:2;for(let i of t)if(i.length!=e){n=`Adjacency list is not N x ${e}`;break}}}return n?(h.innerText=n,r.classList.toggle("is-invalid",!0),r.classList.toggle("is-valid",!1),null):(h.innerText="",r.classList.toggle("is-invalid",!1),r.classList.toggle("is-valid",!0),t)}}static validate_input(t){return""!=t}static sanitize_input(t){return t.replace(/[\n\t\s;]/g,"")}static deserialize_input(t){let e=null;try{return e=JSON.parse(t),e}catch(t){return null}}}const e="    ",i="\n",s="₀",a="₁",n="₂",h={graph:{adjacency_list:{name:"adjacency_list",desc:"Adjacency List",placeholder:`N x 2 array of node, neighbor${i+i}e.g.,${i}[${i+e}[1, 2]${i+e}[2, 3]${i+e}[4, 2]${i}]`,placeholder2:`N x 3 array of weight, node, neighbor${i+i}e.g.,${i}[${i+e}[2, 1, 2]${i+e}[4, 2, 3]${i+e}[1, 4, 2]${i}]`},adjacency_matrix:{name:"adjacency_matrix",desc:"Adjacency Matrix",placeholder:`N x N matrix where matrix[row][col] defines edge between row and col${i+i}e.g.,${i}[${i+e}[0, 1, 0, 1]${i+e}[0, 1, 1, 0]${i+e}[1, 0, 0, 0]${i}]`}},tree:{tree_array:{name:"tree_array",desc:"Array",placeholder:`1D array where elements are sorted in level order traversal d${s},d${a},d${a},d${n},d${n},d${n},d${n}${i+i}e.g.,${i+i}[0, 1, 1, 2, 2, 2, 2]`}},stack:{stack_array:{name:"stack_array",desc:"Array",placeholder:`1D array of length n where i${s} is the stack bottom and iₙ₋₁ is the stack top${i+i}e.g.,${i+i}[6, 5, 4, 3 ,2, 1]`}},queue:{queue_array:{name:"queue_array",desc:"Array",placeholder:`1D array of length n where i${s} is the queue front and iₙ₋₁ is the queue back${i+i}e.g.,${i+i}[1, 2, 3, 4, 5, 6]`}},linkedlist:{linkedlist_array:{name:"linkedlist_array",desc:"Array",placeholder:`1D array of length n where i${s} is the list head and iₙ₋₁ is the list tail${i+i}e.g.,${i+i}[0, 2, 4, 6, 8, 10]`}}},r={graph:{directed:!1,weighted:!1},tree:{binary:!1,nary:!1,nulls:!1},stack:{},queue:{},linkedlist:{doubly:!1}},l="#212529",o=10;class d{constructor(t){this.val=t,this.point=null,this.r=NaN,this.neighbors=[]}}function*c(t){let e=t,i=t[0],s=t[t.length-1];for(let t=0;t<e.length-1;t++){let i={curr:e[t],next:e[t+1]};yield i}return{first:i,last:s,done:!0}}class p{constructor(){this.canvasBgColor=l,this.maxCellSize=50,this.maxRadius=50,this.edgeColor="#EEEEEE",this.nodeColor="#141824",this.nodeFontSize="16px",this.nodeFontFamily="monospace",this.nodeFontColor="#EEEEEE"}}class u{constructor(t,e,i,s){this.x=t,this.y=e,this.w=i,this.h=s}static FromCartesian(t,e,i,s){return i&&s||console.error("Cannot convert Euclidian coordiante to Relative coordiate without plane dimensions"),new u(i/2+t,s/2-e,i,s)}static FromCartesianPoint(t){let e=t.w/2+t.x,i=t.h/2-t.y;return new u(e,i,t.w,t.h)}ToCartesian(){if(!this.w||!this.h)return void console.error("Cannot convert Relative coordiante to Euclidian coordinate without plane dimensions");let t=-1*(this.w/2-this.x),e=this.h/2-this.y;return new g(t,e,this.w,this.h)}}class g{constructor(t,e,i,s){this.x=t,this.y=e,this.w=i,this.h=s}static FromRelative(t,e,i,s){if(!i||!s)return void console.error("Cannot convert Relative coordinate to Cartesian coordinate without plane dimensions");return new g(-1*(i/2-t),s/2-e,i,s)}static FromRelativePoint(t){let e=t.w/2+t.x,i=t.h/2-t.y;return new g(e,i,t.w,t.h)}ToRelative(){if(!this.w||!this.h)return void console.error("Cannot convert Cartesian coordinate to Relative coordinate without plane dimensions");let t=this.w/2+this.x,e=this.h/2-this.y;return new u(t,e,this.w,this.h)}}class y{}y.SegmentLine=(t,e,i)=>{let s=[],a=e.x-t.x,n=e.y-t.y;for(let e=0;e<i+1;e++)s.push(new u(t.x+a*e/i,t.y+n*e/i,t.w,t.h));return s},y.RelativeSlope=(t,e)=>Math.abs((e.x-t.x)/(e.y-t.y)),y.CartesianSlope=(t,e)=>(e.y-t.y)/(e.x-t.x),y.DistanceRatio=(t,e,i)=>t/Math.sqrt(Math.pow(i.x-e.x,2)+Math.pow(i.y-e.y,2)),y.FindPointOnLine=(t,e,i)=>{let s=(1-i)*t.x+i*e.x,a=(1-i)*t.y+i*e.y;return new u(s,a,t.w,t.h)},y.Midpoint=(t,e)=>new u((t.x+e.x)/2,(t.y+e.y)/2,t.w,t.h),y.RelativeDirection=t=>t<.5?"vertical":t>.5&&t<1.5?"diagonal":t>3?"horizontal":void 0;class m extends p{constructor(t,e,i,s){super(),this.dstype=null,this.inputtype="",this.dataset=[],this.matrix=[],this.graph={},this.weights=[],this.edgelist=[],this.unique_nodes=new Set,this.node_list=[],this.edges=[],this.radius=NaN,this.cell_size=NaN,this.grid_size=NaN,this.steps=50,this.current_edge=0,this.animation_frame_id=NaN,this.ctx=t,this.canvas=e,this.options=s,this.input_types=i}parse(t,e,i){switch(this.dataset=t,this.dstype=e,this.inputtype=i,this.inputtype){case this.input_types.graph.adjacency_list.name:this.options.graph.weighted?this.parse_weighted_adjacency_list():this.parse_adjacency_list();break;case this.input_types.graph.adjacency_matrix.name:this.parse_undirected_unweighted_adjacency_matrix()}this.cell_size=this.canvas.width/this.grid_size,this.radius=Math.min(this.maxRadius,.25*this.cell_size)}parse_adjacency_list(){this.unique_nodes=new Set(this.dataset.flatMap((t=>t))),this.node_list=Array.from(this.unique_nodes.values()).sort(((t,e)=>t-e)),this.edgelist=this.dataset,this.grid_size=Math.ceil(Math.sqrt(this.unique_nodes.size));for(let t=0;t<this.grid_size;t++)this.matrix.push(this.node_list.slice(t*this.grid_size,t*this.grid_size+this.grid_size).map((t=>new d(t))))}parse_weighted_adjacency_list(){this.unique_nodes=new Set(this.dataset.flatMap((t=>t.slice(1)))),this.node_list=Array.from(this.unique_nodes.values()).sort(((t,e)=>t-e)),this.grid_size=Math.ceil(Math.sqrt(this.unique_nodes.size));for(let t=0;t<this.grid_size;t++)this.matrix.push(this.node_list.slice(t*this.grid_size,t*this.grid_size+this.grid_size).map((t=>new d(t))));for(let t of this.dataset){let e=t[1]+"_"+t[2],i=t[2]+"_"+t[1];e in this.weights?this.weights[e].push(t[0]):i in this.weights?this.weights[i].push(t[0]):this.weights[e]=[t[0]]}}parse_undirected_unweighted_adjacency_matrix(){this.node_list=Array.from(Array(this.dataset.length).keys()).map((t=>t+1)),this.unique_nodes=new Set(this.node_list),this.grid_size=Math.ceil(Math.sqrt(this.unique_nodes.size));for(let t=0;t<this.dataset.length;t++)for(let e=t+1;e<this.dataset.length;e++)1==this.dataset[t][e]&&this.edgelist.push([t+1,e+1]);for(let t=0;t<this.grid_size;t++)this.matrix.push(this.node_list.slice(t*this.grid_size,t*this.grid_size+this.grid_size).map((t=>new d(t))))}plot(){switch(this.ctx.fillStyle=this.canvasBgColor,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.inputtype){case this.input_types.graph.adjacency_list.name:this.options.graph.weighted?this.plotWeightedUndirectedGraph():this.plotUnweightedUndirectedGraph();break;case this.input_types.graph.adjacency_matrix.name:this.plotUnweightedUndirectedGraph()}}plot_nodes(){for(let t=0;t<this.matrix.length;t++)for(let e=0;e<this.matrix[t].length;e++){let i=Math.floor(21*Math.random()-10),s=Math.floor(21*Math.random()-10),a=this.cell_size*t+this.cell_size/2+i,n=this.cell_size*e+this.cell_size/2+s;this.matrix[t][e].point=new u(a,n,this.canvas.width,this.canvas.height),this.matrix[t][e].r=this.radius,this.graph[this.matrix[t][e].val]=this.matrix[t][e],this.ctx.beginPath(),this.ctx.fillStyle=this.nodeColor,this.ctx.arc(a,n,this.radius,0,2*Math.PI),this.ctx.fill(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.fillStyle=this.nodeFontColor,this.ctx.font=`${this.nodeFontSize} ${this.nodeFontFamily}`,this.ctx.textAlign="center",this.ctx.fillText(String(this.matrix[t][e].val),a,n+3),this.ctx.closePath()}}plotUnweightedUndirectedGraph(){this.plot_nodes();for(let[t,e]of this.edgelist){let i=this.graph[t],s=this.graph[e],a=y.DistanceRatio(this.radius,i.point,s.point),n=y.FindPointOnLine(i.point,s.point,a),h=y.FindPointOnLine(s.point,i.point,a);this.edges.push(c.bind(this)(y.SegmentLine(n,h,this.steps)))}this.animate_edges.bind(this),this.animate_edges()}plotWeightedUndirectedGraph(){this.plot_nodes();for(let[,t,e]of this.dataset){let i=this.graph[t],s=this.graph[e],a=t+"_"+e,n=e+"_"+t;if(0==this.weights[a].length&&0==this.weights[n].length)continue;let h=y.DistanceRatio(this.radius,i.point,s.point),r=y.FindPointOnLine(i.point,s.point,h),l=y.FindPointOnLine(s.point,i.point,h),o=y.Midpoint(i.point,s.point),d=this.format_edge_label(a,n),p=y.RelativeSlope(i.point,s.point),[u,g]=this.calc_label_offsets(p,d);this.edges.push(c.bind(this)(y.SegmentLine(r,l,this.steps))),this.ctx.beginPath(),this.ctx.fillStyle="#CCCCCC",this.ctx.font="10px monospace",this.ctx.textAlign="center",this.ctx.fillText(d,o.x+u,o.y+g),this.ctx.closePath()}this.animate_edges.bind(this),this.animate_edges()}format_edge_label(t,e){let i="";return(this.weights[t]||this.weights[e])&&(this.weights[t].length?i=this.weights[t].sort(((t,e)=>t-e)).join(", "):this.weights[e].length&&(i=this.weights[e].sort(((t,e)=>e-t)).join(",")),this.weights[t]=[],this.weights[e]=[]),i}calc_label_offsets(t,e){let i=0,s=0;return t<.5||t>.5&&t<1.5?i=e.length>1?-(e.length+10):-6:t>3&&(s=-3),[i,s]}animate_edges(){let t=this.edges[this.current_edge].next();if(0==t.done){let{curr:e,next:i}=t.value;this.animation_frame_id=requestAnimationFrame(this.animate_edges.bind(this)),this.ctx.beginPath(),this.ctx.strokeStyle=this.edgeColor,this.ctx.moveTo(e.x,e.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke()}if(1==t.done){let{first:e,last:i}=t.value;cancelAnimationFrame(this.animation_frame_id),this.ctx.closePath(),this.current_edge+=1;let s=i.ToCartesian(),a=30,n=y.CartesianSlope(e.ToCartesian(),i.ToCartesian()),h=s.x+o*Math.cos(Math.atan(n)-a*(Math.PI/180)),r=s.y+o*Math.sin(Math.atan(n)-a*(Math.PI/180)),l=u.FromCartesian(h,r,i.w,i.h),d=s.x+o*Math.cos(Math.atan(n)+a*(Math.PI/180)),c=s.y+o*Math.sin(Math.atan(n)+a*(Math.PI/180)),p=u.FromCartesian(d,c,i.w,i.h),g=y.DistanceRatio(o,i,l),m=y.FindPointOnLine(i,l,g),_=y.FindPointOnLine(i,p,g),x=s.x-m.ToCartesian().x,w=s.y-m.ToCartesian().y,f=Math.sqrt(x*x+w*w),v=x/f*o+s.x,b=w/f*o+s.y,C=s.x-_.ToCartesian().x,k=s.y-_.ToCartesian().y,M=Math.sqrt(C*C+k*k),$=C/M*o+s.x,S=k/M*o+s.y,q=u.FromCartesian(v,b,this.canvas.width,this.canvas.height),z=u.FromCartesian($,S,this.canvas.width,this.canvas.height),E=null,j=null;return i.y-e.y>0?Math.min(q.y,z.y)<Math.min(m.y,_.y)?(E=q,j=z):(E=m,j=_):i.y-e.y<0&&(Math.max(q.y,z.y)>Math.max(m.y,_.y)?(E=q,j=z):(E=m,j=_)),this.ctx.beginPath(),this.ctx.strokeStyle=this.edgeColor,this.ctx.moveTo(i.x,i.y),this.ctx.lineTo(E.x,E.y),this.ctx.stroke(),this.ctx.closePath(),this.ctx.beginPath(),this.ctx.strokeStyle=this.edgeColor,this.ctx.moveTo(i.x,i.y),this.ctx.lineTo(j.x,j.y),this.ctx.stroke(),void(this.current_edge<this.edges.length&&(this.animation_frame_id=requestAnimationFrame(this.animate_edges.bind(this))))}}}(()=>{let e,i,s,a,n,o,d,c,p="graph",u="adjacency_list",g=r,y=h;function _(t){if(t.target.hasAttribute("dsinputtypeoption")){p=t.target.getAttribute("dstype"),u=t.target.getAttribute("dsinputtype"),localStorage.setItem("dstype",p),localStorage.setItem("dsinputtype",u);let e=document.querySelector(".dataset-dropdown-text");e&&(e.innerText=t.target.innerText);let i=function(){switch(p){case"graph":return function(){n.classList.toggle("hide-opts-panel",!0),o.classList.toggle("hide-opts-panel",!0),a.classList.toggle("hide-opts-panel",!1),s.show();let t=document.getElementById("weighted_switch"),e=document.getElementById("directed-switch");g.graph.weighted=t.checked,g.graph.directed=e.checked}(),function(){if("adjacency_list"==u)return c.checked?y.graph.adjacency_list.placeholder2:y.graph.adjacency_list.placeholder;if("adjacency_matrix"==u)return y.graph.adjacency_matrix.placeholder}();case"tree":a.classList.toggle("hide-opts-panel",!0),o.classList.toggle("hide-opts-panel",!0),n.classList.toggle("hide-opts-panel",!1),s.show(),setTimeout((()=>{let t=document.getElementById("bst_switch"),e=document.getElementById("nary-switch"),i=document.getElementById("nulls-switch");g.tree.binary=t.checked,g.tree.nulls=i.checked,g.tree.nary=e.checked}),200);break;case"stack":case"queue":s.hide();break;case"linkedlist":!function(){n.classList.toggle("hide-opts-panel",!0),a.classList.toggle("hide-opts-panel",!0),o.classList.toggle("hide-opts-panel",!1),s.show();let t=document.getElementById("doubly_switch");g.linkedlist.doubly=t.checked}()}return y[p][u].placeholder}();d&&d.setAttribute("placeholder",i)}}function x(){u&&function(){let s=d.value;if(t.validate_input(s)){let a=t.parse_input(s,p,u,g);if(null==a);else{localStorage.setItem("ds-input",s),document.getElementById("idle-canvas-overlay").style.display="none",i.clearRect(0,0,e.width,e.height);let t=null;switch(u){case null:return;case y.graph.adjacency_list.name:case y.graph.adjacency_matrix.name:t=new m(i,e,y,g);break;default:return}t.parse(a,p,u),t.plot()}}}()}!function(){d=document.getElementById("dataset-textarea"),function(){let t=[];for(let e in y){let i=document.createElement("li"),s=document.createElement("h6");s.innerText=e.slice(0,1).toUpperCase()+e.slice(1),s.className="dropdown-header";let a=document.createElement("hr");a.className="dropdown-divider",i.appendChild(s),t.push(i);for(let i in y[e]){let s=document.createElement("li"),a=document.createElement("a");a.className="dropdown-item",a.href="#",a.innerText=y[e][i].desc,a.setAttribute("dstype",e),a.setAttribute("dsinputtypeoption",""),a.setAttribute("dsinputtype",i),s.appendChild(a),t.push(s)}t.push(a)}let e=document.querySelector(".dropdown-menu");for(let i of t)e.appendChild(i)}(),s=new bootstrap.Collapse("#ds-collapse-panel",{toggle:!1}),a=document.getElementById("graph-options-panel"),n=document.getElementById("tree-options-panel"),o=document.getElementById("linkedlist-options-panel"),c=document.getElementById("weighted_switch"),c.addEventListener("click",(t=>{"adjacency_list"==u&&(g.graph.weighted=t.target.checked,g.graph.weighted?d.setAttribute("placeholder",y.graph.adjacency_list.placeholder2):d.setAttribute("placeholder",y.graph.adjacency_list.placeholder))})),document.querySelector(".dropdown-menu").addEventListener("click",_),document.querySelector("#go-btn").addEventListener("click",x);let t=document.querySelector(".content"),h=document.querySelector(".form-container");e=document.querySelector("canvas"),e.width=t.clientWidth-h.clientWidth-20,e.height=e.width,i=e.getContext("2d",{alpha:!1}),i.fillStyle=l,i.fillRect(0,0,e.width,e.height);let r=localStorage.getItem("ds-input"),p=localStorage.getItem("dstype"),m=localStorage.getItem("dsinputtype");if(null!=r&&(d.value=r),null!=p&&null!=m){let t=document.querySelector(`a.dropdown-item[dstype=${p}][dsinputtype=${m}]`);t&&t.click()}}()})()}();
